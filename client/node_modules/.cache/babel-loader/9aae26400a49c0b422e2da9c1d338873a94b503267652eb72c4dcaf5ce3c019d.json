{"ast":null,"code":"import decode from 'jwt-decode';\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if the user is still logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    // use type coersion to check if token is NOT undefined and the token is NOT expired\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if the token has expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // retrieve token from localStorage\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  // set token to localStorage and reload page to homepage\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  // clear token from localStorage and force logout with reload\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["C:/Users/jerem/OneDrive/Desktop/EDUX/React Training/deep-thoughts/client/src/utils/auth.js"],"sourcesContent":["import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n    // retrieve data saved in token\r\n    getProfile() {\r\n      return decode(this.getToken());\r\n    }\r\n  \r\n    // check if the user is still logged in\r\n    loggedIn() {\r\n      // Checks if there is a saved token and it's still valid\r\n      const token = this.getToken();\r\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\r\n      return !!token && !this.isTokenExpired(token);\r\n    }\r\n  \r\n    // check if the token has expired\r\n    isTokenExpired(token) {\r\n      try {\r\n        const decoded = decode(token);\r\n        if (decoded.exp < Date.now() / 1000) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } catch (err) {\r\n        return false;\r\n      }\r\n    }\r\n  \r\n    // retrieve token from localStorage\r\n    getToken() {\r\n      // Retrieves the user token from localStorage\r\n      return localStorage.getItem('id_token');\r\n    }\r\n  \r\n    // set token to localStorage and reload page to homepage\r\n    login(idToken) {\r\n      // Saves user token to localStorage\r\n      localStorage.setItem('id_token', idToken);\r\n  \r\n      window.location.assign('/');\r\n    }\r\n  \r\n    // clear token from localStorage and force logout with reload\r\n    logout() {\r\n      // Clear user token and profile data from localStorage\r\n      localStorage.removeItem('id_token');\r\n      // this will reload the page and reset the state of the application\r\n      window.location.assign('/');\r\n    }\r\n  }\r\n\r\n  export default new AuthService();\r\n\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,YAAY;AAE/B,MAAMC,WAAW,CAAC;EACd;EACAC,UAAUA,CAAA,EAAG;IACX,OAAOF,MAAM,CAAC,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;EAChC;;EAEA;EACAC,QAAQA,CAAA,EAAG;IACT;IACA,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,CAAC,CAAC;IAC7B;IACA,OAAO,CAAC,CAACE,KAAK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC;EAC/C;;EAEA;EACAC,cAAcA,CAACD,KAAK,EAAE;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAK,CAAC;MAC7B,IAAIE,OAAO,CAACC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;QACnC,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAO,KAAK;IACd;EACF;;EAEA;EACAR,QAAQA,CAAA,EAAG;IACT;IACA,OAAOS,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;;EAEA;EACAC,KAAKA,CAACC,OAAO,EAAE;IACb;IACAH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IAEzCE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP;IACAR,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;IACnC;IACAJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;AACF;AAEA,eAAe,IAAIlB,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}